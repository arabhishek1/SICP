Ex 1.11
		A function f is defined by the rule that f(n) = n if n<3 and f(n) = f(n - 1) + 2f(n - 2) + 3f(n -3) if n> 3. 
	Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process
		Recursive process:
			(def (fn n)
				(if (< n 3))
					n
					(+ (fn n-1) (* 2 (fn n-2)) (* 3 (fn n-3))))

		Iterative process:
			(define (fn n) 
   				(define (iter a b c count) 
     				(if (= count 0) 
       					a 
       					(iter b c (+ c (* 2 b) (* 3 a)) (- count 1)))) 
   				(iter 0 1 2 n))


Ex 1.12
		Pascal triangle
		(define (Pascal-triangle n i)
  			(cond ((= i 1) 1)
        		  ((= i n) 1)
        		  (else (+ (Pascal-triangle (- n 1) (- i 1)) 
                 		   (Pascal-triangle (- n 1) i)))))

Ex 1.13
		φ = (1+√5)/2
		ψ = (1-√5)/2

		[1] φ2 = (1+√5)2/4 = (1 + 2√5 + 5)/4 = (3+√5)/2
		[2] ψ2 = (1-√5)2/4 = (3-√5)/2

		By induction
		Base cases:
			Fib(0)= (φ0 – ψ0)/√5 = 0
			Fib(1)= (φ – ψ)/√5 = [(1+√5)/2 - (1-√5)/2] / √5 = 1

		Induction step:
			[3] Fib(k) = (φk – ψk)/√5
			[4] Fib(k+1) = (φ.φk – ψ.ψk)/√5
			By definition Fib(k+2) = Fib(k) + Fib(k+1)
			[3] + [4] Fib(k+2) = [φk(1+φ) - ψk(1+ψ)] / √5
			(1+φ) = 1 + (1+√5)/2 = (3+√5)/2 = φ^2 – from [1]
			(1+ψ) = 1 + (1-√5)/2 = (3-√5)/2 = ψ^2 – from [2]
			Fib(k+2) = φk.φ2 – ψk.ψ2 / √5 = (φk+2 – ψk+2) / √5

		Now ψ = (1-√5)/2 and 4 < 5 < 9
		=> 2 < √5 < 3
		=> -1 < ψ < 0
		=> ψn -> 0 as n -> ∞
		Fib(n) -> (φ – 0)n/√5 as n -> ∞
			Fib(n) -> φn/√5

Ex 1.15
		a. 5 times
		b. O(log a)

Ex 1.16
	(define (fast-expt b n) 
   		(define (iter a b n) 
    		(cond ((= n 0) a) 
    			((even? n) (iter a (square b) (/ n 2))) 
    			(else (iter (* a b) b (- n 1))))) 
   		(iter 1 b n)) 
  
 	(define (square x) (* x x)) 

Ex 1.17
	(define (double x) (+ x x)) 
 	(define (halve x) (/ x 2)) 
  
 	(define (* a b) 
	   	(cond ((= b 0) 0) 
	        ((even? b) (double (* a (halve b)))) 
	        (else (+ a (* a (- b 1)))))) 

Ex 1.18
	(define (double x) (+ x x)) 
	(define (halve x) (floor (/ x 2))) 
  
 	(define (* a b) 
   		(define (iter accumulator a b) 
     		(cond ((= b 0) accumulator) 
           		((even? b) (iter accumulator (double a) (halve b))) 
           		(else (iter (+ accumulator a) a (- b 1))))) 
   		(iter 0 a b)) 

Ex 1.19
	(define (fib n)
  		(fib-iter 1 0 0 1 n))
 
	(define (fib-iter a b p q count)
  		(cond ((= count 0) b)
        	((even? count)
         	(fib-iter a
                   	b
                   	(+ (square p) (square q))  ; p'
                   	(+ (* 2 p q)  (square q))  ; q'
                   	(/ count 2)))
        	(else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
    
    (define (square x) (* x x))

Ex 1.20
	Normal order

	(gcd 206 40)
	01: zero? 40
	(gcd 40 (remainder 206 40))
	02: zero? (remainder 206 40)
	(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))
	03: zero? (remainder 40 (remainder 206 40))
	04: zero? (remainder 40 6)
	zero? 4
	(gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	05: zero? (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
	06: zero? (remainder 6 (remainder 40 (remainder 206 40)))
	07: zero? (remainder 6 (remainder 40 6))
	08: zero? (remainder 6 4)
	zero? 2
	(gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))
	09: zero? (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	10: zero? (remainder (remainder 40 6) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	11: zero? (remainder 4 (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	12: zero? (remainder 4 (remainder (remainder 206 40) (remainder 40 6)))
	13: zero? (remainder 4 (remainder (remainder 206 40) 4))
	14: zero? (remainder 4 (remainder 6 4))
	15: zero? (remainder 4 2)
	zero? 2
	(gcd (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	(remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	16: zero? (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	17: zero? (remainder (remainder 6 (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	18: zero? (remainder (remainder 6 (remainder 40 6)) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	19: zero? (remainder (remainder 6 4) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	20: zero? (remainder 2 (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	21: zero? (remainder 2 (remainder (remainder 40 6) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	22: zero? (remainder 2 (remainder 4 (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
	23: zero? (remainder 2 (remainder 4 (remainder 6 (remainder 40 (remainder 206 40)))))
	24: zero? (remainder 2 (remainder 4 (remainder 6 (remainder 40 6))))
	25: zero? (remainder 2 (remainder 4 (remainder 6 4)))
	26: zero? (remainder 2 (remainder 4 2))
	27: zero? (remainder 2 2)
	zero? 0
	-> (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	28: -> (remainder (remainder 40 6) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	29: -> (remainder 4 (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
	30: -> (remainder 4 (remainder 6 (remainder 40 (remainder 206 40))))
	31: -> (remainder 4 (remainder 6 (remainder 40 6)))
	32: -> (remainder 4 (remainder 6 4))
	32: -> (remainder 4 2)
	33: -> (remainder 4 2)
	-> 2

	Applicative order

		(gcd 206 40) 
  
	 	(gcd 40 (remainder 206 40)) 
	  
	 	(gcd 40 6) 
	  
	 	(gcd 6 (remainder 40 6)) 
	  
	 	(gcd 6 4) 
	  
	 	(gcd 4 (remainder 6 4)) 
	  
	 	(gcd 4 2) 
	  
	 	(gcd 2 (remainder 4 2)) 
	  
	 	(gcd 2 0) 
	  
	 	2
	 	 

Ex 1.1

	1.(+ 5 3 4)
	    9

	2. (- 9 1)
	    8

	3.(/ 6 2)
		3

	4.(+ (* 2 4) (- 4 6)) 
		6

	5.	(define a 3)
		(define b (+ a 1))
		(+ a b (* a b))
		19

	6.(= a b)
		4


	7. (if (and (> b a) (< b (* a b)))
		b
		a)
		4

	8.(cond ((= a 4) 6)
			((= b 4) (+ 6 7 a))
			(else 25))
		6

	9.(+ 2 (if (> b a) b a))
		6

	10.(* (cond ((> a b) a)
				((< a b) b)
				(else -1))
		(+ a 1))
		-5

Ex 1.2
	5+4+(2-(3-(6+4/5))) / 3(6-2)(2-7)
		(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (* 3 (- 6 2) (- 2 7)))

Ex 1.3
	Define a procedure that takes three numbers as arguments and returns the sum of the
	squares of the two larger numbers.

	(define (square no) (* no no) )
	(define (sum_of_squares no_1 no_2 no_ 3) (+ (square no_1) (square no_2) (square no_3) ) )
	(define (min_of_two no_1 no_2) (if (< no_1 no_2) no_1 no_2)) 
	(define (min_of_three no_1 no_2 no_3) ( min_of_two( min_of_two(no_1 no_2) no_3)))
	(define (sum_of_larger_two_no no_1 no_2 no_3) (- sum_of_squares(no_1 no_2 no_3) square(min_of_three(x y z) ) ) )

Ex 1.4
	(define (a-plus-abs-b a b)
		((if (> b 0) + -) a b))

		Computes sum of first no and absolute value of second no

Ex 1.5
	
	(define (p) (p))
	(define (test x y)
	(if (= x 0)
		0
		y))
Then he evaluates the expression
(test 0 (p))

	applicative order:
		Here arguments will be evaluated first ,then it applies procedure on its arguments .Hence p will be called

	Normal order:
		Here arguments will not be evaluated until it is required ,hence test will be called which will return 0 ,hence p will remain uncalled.

Ex 1.6
	(define (sqrt-iter guess x)
		(new-if (good-enough? guess x)
				guess
				(sqrt-iter (improve guess x)
							x)))
		Since its not a special form and in lisp by default its application order evaluation ,the above procedure 
	results	in an infinite recursion

Ex 1.7
		The good-enough? test used in computing square roots will not be very effective for
	finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost
	always performed with limited precision. This makes our test inadequate for very large numbers. Explain
	these statements, with examples showing how the test fails for small and large numbers. An alternative
	strategy for implementing good-enough? is to watch how guess changes from one iteration to the
	next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that
	uses this kind of end test. Does this work better for small and large numbers?
			Since 0.001 is the tolerance limit,it'll definitely be very large limit for small no less than 0.001 and
		itself which results in incorrect calculation.
			For very large no as well the absolute tolerance limit doesnt work out since calculation of guess for those 
		might lead to never ending loops

			(define (new_good_enough? guess x) 
				(< abs( (- (improve guess x) guess ) ) (* guess 0.001))   
										
Ex 1.8
		Newtons Cube root method 
		(define (cal_square x) (* x x))

		 (define (cube_roots_iter guess prev_guess input) 
   				(if (good_enough? guess prev_guess) 
       			guess 
       			(cube_roots_iter (improve guess input) guess input))) 
  
 		(define (good_enough? guess prev_guess input) 
   				(> 0.001 (/ (abs (- guess prev_guess)) 
               		input))) 
  
 		(define (improve guess input) 
   		(/ (+ (/ input (cal_square guess)) 
      	(* 2 guess)) 
    	3)) 
			
		(define (cube_root x)
			(cube_roots_iter (improve 1 x) 1 x))

Ex 1.9
		(define (+ a b)
			(if (= a 0)
				b
				(inc (+ (dec a) b))))

		(define (+ a b)
			(if (= a 0)
				b
				(+ (dec a) (inc b))))
		first one recursive ,second one iterative

Ex 1.10
		(define (A x y)
			(cond ((= y 0) 0)
				((= x 0) (* 2 y))
				((= y 1) 2)
				(else (A (- x 1)
						(A x (- y 1))))))

		(A 1 10)
			1024
		
		(A 2 4)
			65,536

		(A 3 3)
			65,536

		(define (f n) (A 0 n))
			2 * n
		(define (g n) (A 1 n))
			2 ^ n
		(define (h n) (A 2 n))
			2^2^...n times
